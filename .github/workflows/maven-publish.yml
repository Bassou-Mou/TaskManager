name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: -Xmx1024m

jobs:
  # Job 1: Build et Tests
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Setup JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: 📦 Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 🔨 Build with Maven
        run: mvn clean install -DskipTests

      - name: 🧪 Run Unit Tests
        run: mvn test

      - name: 🧪 Run Integration Tests
        run: mvn verify -DskipUnitTests

      - name: 📊 Generate Test Coverage Report
        run: mvn jacoco:report

      - name: 📈 Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./target/site/jacoco/jacoco.xml
          fail_ci_if_error: false

      - name: 📋 Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            target/surefire-reports/*.xml
            target/failsafe-reports/*.xml

      - name: 📦 Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: taskmanager-jar
          path: target/*.jar
          retention-days: 5

  # Job 2: Analyse de code (qualité)
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Nécessaire pour SonarCloud

      - name: ☕ Setup JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: 🔍 Run Checkstyle
        run: mvn checkstyle:check
        continue-on-error: true

      - name: 🔍 Run SpotBugs
        run: mvn spotbugs:check
        continue-on-error: true

  # Job 3: Build Docker Image
  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        if: github.event_name != 'pull_request'

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/taskmanager
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔍 Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/taskmanager:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
        if: github.event_name != 'pull_request'

      - name: 📤 Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
        if: github.event_name != 'pull_request'

  # Job 4: Déploiement (optionnel)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://taskmanager.yourdomain.com
    
    steps:
      - name: 🚀 Deploy to server
        run: |
          echo "🎉 Deploying to production..."
          # Ajouter ici les commandes de déploiement
          # Par exemple: SSH vers votre serveur et pull de l'image Docker

  # Job 5: Notification
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, docker-build]
    if: always()
    
    steps:
      - name: 📧 Send notification
        run: |
          if [ "${{ needs.build-and-test.result }}" == "success" ]; then
            echo "✅ Build successful!"
          else
            echo "❌ Build failed!"
          fi