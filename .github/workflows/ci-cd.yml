name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: -Xmx1024m

jobs:
  # ========================================
  # JOB 1: Build et Tests
  # ========================================
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout du code
        uses: actions/checkout@v4

      - name: ‚òï Configuration JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name:  V√©rification du format du code
        run: mvn spotless:check || true

      - name:  Compilation
        run: mvn clean compile -B

      - name:  Tests unitaires
        run: mvn test -B

      - name: Tests d'int√©gration
        run: mvn verify -B

      - name:  Analyse de couverture de code
        run: mvn jacoco:report

      - name:  Upload du rapport JaCoCo
        uses: codecov/codecov-action@v4
        with:
          files: ./target/site/jacoco/jacoco.xml
          flags: unittests
          name: codecov-taskmanager
        continue-on-error: true

      - name:  Analyse SpotBugs
        run: mvn spotbugs:check
        continue-on-error: true

      - name:  Package de l'application
        run: mvn package -DskipTests -B

      - name:  Upload de l'artifact JAR
        uses: actions/upload-artifact@v4
        with:
          name: taskmanager-jar
          path: target/*.jar
          retention-days: 7

  # ========================================
  # JOB 2: Analyse de qualit√© (SonarCloud)
  # ========================================
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push'
    
    steps:
      - name:  Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # N√©cessaire pour SonarCloud

      - name: Configuration JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name:  Cache SonarCloud
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name:  Analyse SonarCloud
        run: |
          mvn clean verify sonar:sonar \
            -Dsonar.projectKey=votre-project-key \
            -Dsonar.organization=votre-org \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

  # ========================================
  # JOB 3: Build et Push Docker
  # ========================================
  docker-build-push:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name:  Checkout du code
        uses: actions/checkout@v4

      - name:  Configuration Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name:  Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name:  Extraction des m√©tadonn√©es Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/taskmanager
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Ô∏è Build et Push de l'image Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/taskmanager:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/taskmanager:buildcache,mode=max

      - name:  Scan de s√©curit√© de l'image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/taskmanager:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name:  Upload des r√©sultats Trivy
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # ========================================
  # JOB 4: D√©ploiement (exemple avec SSH)
  # ========================================
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://taskmanager-app.com
    
    steps:
      - name: üöÄ D√©ploiement via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            cd /opt/taskmanager
            docker-compose pull
            docker-compose up -d --force-recreate
            docker system prune -f

      - name:  V√©rification du d√©ploiement
        run: |
          sleep 10
          curl -f https://taskmanager-app.com/actuator/health || exit 1